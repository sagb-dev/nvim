vim.loader.enable()

-- Command line abbreviations
vim.cmd.cabbrev("Q q")
vim.cmd.cabbrev("W w")
vim.cmd.cabbrev("WQ wq")
vim.cmd.cabbrev("Wqa wqa")

-- vim.opt.fillchars:append({
-- 	-- eob = "␗", -- End-of -Transmission-Block
-- 	eob = " ",
-- 	horiz = "━",
-- 	horizup = "┻",
-- 	horizdown = "┳",
-- 	vert = "┃",
-- 	vertleft = "┫",
-- 	vertright = "┣",
-- 	verthoriz = "╋",
-- 	fold = " ",
-- 	diff = "─",
-- 	msgsep = "‾",
-- 	foldsep = "│",
-- 	foldopen = "▾",
-- 	foldclose = "▸",
-- })
-- vim.opt.listchars:append({
-- 	tab = "▸ ",
-- 	-- tab = "» ",
-- 	-- tab = "!·",
-- 	trail = "·",
-- 	nbsp = "␣",
-- 	-- eol = "↲",
-- })
-- vim.opt.whichwrap:append("<>[]hl~")
-- vim.opt.backupdir:remove({ "." })
-- vim.opt.cinkeys:remove(":")
-- vim.opt.grepformat:append("%f:%l:%c:%m")
-- -- if you make use of `n` in cpsetions and virtual_lines you'll have to modify
-- -- the format of the diagnostics displayed by virtual_lines
-- -- vim.opt.cpoptions:append("n")
-- vim.opt.showbreak = "↪ "
-- vim.opt.breakindent = true
-- vim.opt.clipboard = "unnamedplus"
-- vim.opt.colorcolumn = tostring(80)
-- vim.opt.conceallevel = 1
-- vim.opt.copyindent = true
-- vim.opt.formatoptions = vim.opt.formatoptions + "r" + "c" + "q" + "j" - "t" - "a" - "o" - tostring(2)
-- vim.opt.grepprg = "rg --vimgrep --no-heading --smart-case"
-- vim.opt.hlsearch = true -- if true, clear with <C-l>
-- vim.opt.ignorecase = true
-- vim.opt.inccommand = "split"
-- vim.opt.incsearch = true
-- vim.opt.infercase = true
-- vim.opt.joinspaces = false
-- vim.opt.lazyredraw = false
-- vim.opt.linebreak = true
-- vim.opt.list = true
-- vim.opt.mouse = "a"
-- vim.opt.preserveindent = true
-- vim.opt.scrolloff = 9999
-- vim.opt.sidescrolloff = 9999
-- -- vim.opt.scrolljump = -50 -- scroll like emacs
-- vim.opt.sessionoptions = {
-- 	"blank",
-- 	"buffers",
-- 	"curdir",
-- 	"folds",
-- 	"globals",
-- 	"help",
-- 	"options",
-- 	"resize",
-- 	"tabpages",
-- 	"terminal",
-- 	"winpos",
-- 	"winsize",
-- }
-- vim.opt.shiftround = true
-- vim.opt.showcmd = false
-- vim.opt.smartcase = true
-- vim.opt.smartindent = true
-- vim.opt.smarttab = true
-- vim.opt.smoothscroll = true
-- -- vim.opt.spelllang = "en,es"
-- -- vim.opt.spelloptions = "camel,noplainbuffer"
-- -- vim.opt.spellsuggest = "best," .. tostring(6)
-- vim.opt.splitbelow = true
-- vim.opt.splitright = true
-- vim.opt.startofline = true

-- Default values, ignored in this config because of .editorconfig
vim.opt.tabstop = 4
vim.opt.shiftwidth = vim.o.tabstop

vim.opt.timeoutlen = 600
vim.opt.title = true
vim.opt.titlelen = 0
-- vim.opt.ttimeoutlen = 10
-- vim.opt.undofile = true
-- vim.opt.updatetime = 300
-- vim.opt.virtualedit = "block" -- all
-- -- vim.opt.winborder = "rounded"

vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.numberwidth = 1
vim.opt.foldcolumn = "auto:" .. tostring(1)
vim.opt.signcolumn = "yes:" .. tostring(1)

vim.opt.swapfile = false
vim.opt.backup = true
vim.opt.backupcopy = "yes"

-- no statusline, anywhere
vim.api.nvim_set_hl(0, "StatusLine", { link = "Normal" })
vim.api.nvim_set_hl(0, "StatusLineNC", { link = "Normal" })
vim.opt.cmdheight = 0
vim.opt.laststatus = 0
vim.opt.statusline = "%{repeat('─',winwidth('.'))}"

-- vim.api.nvim_create_autocmd({ "InsertLeave", "CmdlineLeave" }, {
-- 	callback = function()
-- 		vim.opt.relativenumber = true
-- 	end,
-- })
--
-- vim.api.nvim_create_autocmd({ "InsertEnter", "CmdlineEnter" }, {
-- 	callback = function()
-- 		vim.opt.relativenumber = false
-- 	end,
-- })
--
-- vim.opt.autowrite = true
-- vim.opt.autowriteall = true
-- vim.api.nvim_create_autocmd("FocusLost", {
-- 	callback = function()
-- 		local skip_filetypes = {
-- 			[""] = true,
-- 			["*"] = true,
-- 			help = true,
-- 			netrw = true,
-- 			vim = true,
-- 		}
--
-- 		if skip_filetypes[vim.bo.filetype] then
-- 			return
-- 		end
--
-- 		vim.cmd.write()
-- 	end,
-- })

-- -- NetRW
-- vim.g.netrw_liststyle = 3
-- vim.g.netrw_banner = 0
-- vim.g.netrw_winsize = 20 -- I should improve this to be dynamic
-- vim.g.netrw_browse_split = 4 -- open files in previous window
-- vim.g.netrw_altv = 1
--
-- vim.api.nvim_create_autocmd({ "BufEnter", "BufReadPost" }, {
-- 	callback = function()
-- 		local mark = vim.api.nvim_buf_get_mark(0, '"')
-- 		if mark[1] > 0 and mark[1] <= vim.api.nvim_buf_line_count(0) then
-- 			vim.api.nvim_win_set_cursor(0, mark)
-- 		end
-- 	end,
-- })
--
-- vim.api.nvim_create_autocmd("BufWritePre", {
-- 	callback = function(event)
-- 		local dir = vim.fn.fnamemodify(event.match, ":p:h")
-- 		if vim.fn.isdirectory(dir) == 0 then
-- 			vim.fn.mkdir(dir, "p")
-- 		end
-- 	end,
-- })

vim.api.nvim_create_autocmd("TextYankPost", {
	callback = function()
		vim.highlight.on_yank()
	end,
})

vim.api.nvim_create_autocmd("BufWritePre", {
	callback = function()
		local save_cursor = vim.fn.getpos(".")
		vim.cmd([[%s/\s\+$//e]])
		vim.fn.setpos(".", save_cursor)
	end,
})

vim.api.nvim_create_autocmd("VimResized", { command = "wincmd =" })
vim.api.nvim_create_autocmd("BufWinEnter", { command = "checktime" })
vim.api.nvim_create_autocmd({ "BufWinLeave" }, { command = "silent! mkview" })
vim.api.nvim_create_autocmd({ "BufWinEnter" }, { command = "silent! loadview" })

require("vim._extui").enable({
	enable = true,
	msg = {
		target = "msg",
	},
})
